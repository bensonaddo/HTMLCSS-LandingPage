/************* BASE STYLES *************/
/* * {
  box-sizing: border-box;
}
body {
  font-family: 'Open Sans', sans-serif;
  font-size: 14px;
  line-height: 1.4;
  color: #364147;
  margin: 0;
}
input,
button {
  font-family: inherit;
  font-size: inherit;
}
a {
  color: #faa541;
  text-decoration: none;
}
ul {
  padding: 0;
  margin: 0;
  list-style: none;
}
nav {
  padding: 10px 0;
}
h1,
h2,
h3,
h4,
h5,
h6 {
  margin: 0;
} */
/***************************************/

/* Container 
To center content in the body of the page we'll need to create a container that is positioned and styled in CSS and then this class will be applied to several HTML elements in our index.html.

To start, in the css/main.css file create a .container class that sets the top and bottom margins to 0 and the left and right to auto.

Set the max-width to 1170px.


Container Class Attribute

This task applies the CSS that you wrote in the previous step so that you can see how it affects the rendered HTML. This is a pattern that you'll be following often in this project - write some CSS, then apply it to HTML.

Add the container class that was just created to the following HTML elements in index.html:

First <div> in the <nav>
First <div> in the <!-- HERO --> <section>.
First <div> in the <!-- MAIN CONTAINER --> block.
The first <section> in the <footer>
*/
.container {
  margin-top: 0;
  margin-bottom: 0;
  margin-left: auto;
  margin-right: auto;
  max-width: 1170px;
}

/*
Sections as Flex Containers

In main.css create a rule that selects all <section> elements in the index.html. Adjust the display property in this rule so that each <section> acts as a flex container.
*/
section {
  display: flex;
}

/* Flex Utility 

Flex Utilities

The layout of this landing page will be done using CSS flexbox. Instead of repeating ourselves across our classes we will pull the more commonly used properties into their own classes. Below you will find three classes and the properties they should contain. Create these three classes below the section rule just created.

.flex - display: flex
.flex-column - flex-direction: column
.flex-one - flex: 1

Flex Class Attribute

Now, apply the flex utility class to several HTML elements in the index.html file:

flex

First <div> in the <nav>.
First <div> in the <!-- BRANDING --> block.
First <div> in the <!-- SEARCH --> block.
First <ul> in the <!-- SEARCH --> block.
First and second <div>'s in the <!-- PROFILE --> block.
First <div> in the <!-- HERO --> <section>.
First <div> in the <!-- SALE BANNER --> <section>.
Second <div> in the <!-- FULL BANNER --> <section>.
First <div> in the <!-- PS DEMO --> <section>.

Flex Column and Flex One Class Attributes

Now, apply the flex-column and flex-one utility classes to these HTML elements in index.html :

flex-column

First nested <div> in the <!-- PROFILE --> block.
First <div> in the <!-- HERO --> <section>.
Second <div> in the <!-- FULL BANNER --> <section>.
First <div> in the <!-- PS DEMO --> <section>.
flex-one

First <div> in the <!-- SEARCH --> block.
*/
.flex {
  display: flex;
}
.flex-column {
  flex-direction: column;
}

.flex-one {
  flex: 1;
}

/* Align Flex Utilities 
Alignment Flex Utilities

To adjust the positioning and alignment of individual elements within a flex container, let's create three additional classes in main.css:

.align-center - align-items: center
.center - justify-content: center
.space-between - justify-content: space-between


Alignment Flex Utilities Class Attributes

We will apply these new alignment flex classes to several HTML elements in the index.html file:

align-center

First <div> in the <!-- BRANDING --> block.
First <div> in the <!-- SEARCH --> block.
First <div> in the <!-- PROFILE --> block.
First <div> in the <!-- HERO --> <section>.
First <div> in the <!-- SALE BANNER --> <section>.
Second <div> in the <!-- FULL BANNER --> <section>.
First <div> in the <!-- PS DEMO --> <section>.

Space Between Utilities Class Attributes

We will apply these new alignment flex classes to several HTML elements in the index.html file:

center

First <div> in the <!-- HERO --> <section>.
First <div> in the <!-- SALE BANNER --> <section>.
Second <div> in the <!-- FULL BANNER --> <section>.
space-between

First <div> in the <nav>.
First <ul> in the <!-- SEARCH --> block.
First <section> in the <footer>.
*/
.align-center {
  align-items: center;
}
.center {
  justify-content: center;
}
.space-between {
  justify-content: space-between;
}

/* Buttons
Buttons

Each button will have a consistent look and feel. In main.css, add the class .btn with the following styles:

add a cursor
remove any borders
padding should be 6px top and bottom and 12px left and right
Round the corners by 3px
change the line height to 1.4
Also, Create two different button styles btn-default and btn-primary. The color of the text for both should be white. The btn-default background color is #faa541. The btn-primary background color should be #364147.


Buttons Class Attribute

In index.html, find the only <a> element in the <!-- FULL BANNER --> block. Give this element the btn class and the button btn-default class.

Then, Find the sign up <button> element in the <footer>. Give this element the btn class and the button btn-primary class.
*/
.btn {
  cursor: pointer;
  border: 0;
  padding: 6px 12px;
  border-radius: 3px;
  line-height: 1.4;
}

.btn-default {
  color: white;
  background-color: #faa541;
}
.btn-primary {
  color: white;
  background-color: #364147;
}

/* Form Controls 
We only have a few form controls, but let's make a custom class for them anyway. Add a new class called .form-control below the button classes in main.css.

This class should change the display to block, and add padding of 6px top/bottom and 12px left/right. Next, add a 1px solid border with a stroke color of #a0a0a0. The text in the control should have a color of #8598a2. Finally, add a line height of 1.4


Form Controls Class Attribute

Find the <input> element with the placeholder of Enter email address in the <footer> element in the index.html file. Add the form-control class to the <input>.
*/
.form-control {
  display: block;
  padding: 6px 12px;
  border: solid 1px #a0a0a0;
  color: #8598a2;
  line-height: 1.4;
}

/* Typography

There are some base typographic styles we'll use throughout the page.

In the main stylesheet, below the .form-control class, add three classes: .text-light, .text-secondary, and .text-primary.

The light and secondary classes should have a font size of 30px. The light color is #a0a0a0 and the secondary color is #faa541.

The primary class should have a font size of 16px and a color of #364147.

Typography Class Attributes

These are the required index.html modifications. Add the class listed to the correct element.

text-light

<div> with contents Couples retreat weekend
text-secondary

<div> with contents Save an extra 20%

Typography Primary Style Class Attribute

Finally, add the class text-primary to these elements in the index.html file:

<div> with contents when you buy 2 pairs of boots
<div> in footer with contents Customer Support
<div> in footer with contents Company Info
<div> in footer with contents Privacy &amp; Terms
<div> in footer with contents Follow Us
<div> in footer with contents &copy;Pluralsight 2018

*/
.text-light {
  font-size: 30px;
  color: #a0a0a0;
}
.text-secondary {
  font-size: 30px;
  color: #faa541;
}
.text-primary {
  font-size: 16px;
  color: #364147;
}

/*
To verify your work locally for just this module, run the following command in a terminal: npm run test:module2. The output will let you know which tasks are passing and failing. If you would like to display a visual reference use the command npm run visual:module2.

To verify your work on Pluralsight, commit and push your changes to GitHub and click the Check My Work button.


Header

The header of the page has several elements. In this task, we'll style the general header as well as the logo.

Open main.css, and below the other styles create a class called .header-nav that adds a 1px bottom border with the color #a0a0a0
*/
.header-nav {
  border-bottom: 1px #a0a0a0;
}

/*
Brand

Next, setup a class called .brand below the .header-nav class that sets the element size to 170x85 pixels. Adjust the left margin by negative 15 pixels and the right margin by 60 pixels.
*/
.brand {
  width: 170px;
  height: 85px;
  margin-left: -15px;
  margin-right: 60px;
}

/*
Logo

The logo needs to fit within the 170x85 container. To do this, create a .logo class that sets the max-width to 100% and the height to auto.
*/
.logo {
  width: 170px;
  height: 85px;
  max-width: 100%;
  height: auto;
}

/*
Header, Branding, and Logo Class Attributes

Switch over to index.html and we'll apply the newly created header and branding classes to the correct elements.

Apply the header-nav class to the <nav>.

Find the <!-- BRANDING --> block and apply the brand class to the first <div> in the block.

Then, apply the logo class to the <img> tag with the src of img/carved-rock-logo.png
*/

/*
Search Box

Lets get back to work on the styles on the next header element the search box. Create a new class below the existing styles called .search-box. The search box needs to be sized to 330x30 with 6px padding top/bottom and 12px left/right. Finally, give the search box a full 1px border colored #a0a0a0.
*/
.search-box {
  width: 330px;
  height: 30px;
  padding: 6px 12px;
  border: solid 1px #a0a0a0;
}

/* 
Search Button

Another element of the header is the search button. Create a class called .search-button. The background color of the button should be #a0a0a0 and the text color should be white(#ffffff).

Its size should be 100x30 pixels and the border and padding should be reset to 0. Hint: It is best practice to use 0 without the px unit.
*/
.search-button {
  width: 100px;
  height: 30px;
  background-color: #a0a0a0;
  color: #ffffff;
  border: 0;
  padding: 0;
}

/*
Search Class Attributes

Find the <!-- SEARCH --> block in the index.html file. Apply the search-box class to the text <input> and the search-button class to the <button> element.
*/

/*

Navigation List

For the .nav-list class, zero out the left padding. Adjust the width of the list to 575px. Add a top margin of 10px.
*/
.nav-list {
  padding-left: 0;
  width: 575px;
  margin-top: 10px;
}

/*

Navigation List Links

The .nav-list links (li a) should be selected and given the following font properties, 16px, uppercase, 700 weight, with a letter spacing of 0.2px.
*/

.nav-list li a {
  font-size: 16px;
  font-weight: 700;
  letter-spacing: 0.2px;
  text-transform: uppercase;
}

/*
Navigation List Class Attribute

In index.html, locate the <ul> in the search block. Give this element a class of nav-list.
*/

/*
Profile

To style the profile section of the header we need two different classes. Name them .profile and .account. The only declaration in the .profile class should set the left margin to auto. The .account class should adjust the alignment on the text to the right, have a full padding of 15px, and a font color and size of #364147 and 18px.

Finally, select all the links that are descendant of all elements with a class of .account. Overwrite the font-size, set it to 14px
*/
.profile {
  margin-left: auto;
}
.account {
  text-align: right;
  padding: 15px;
  color: #364147;
  font-size: 18px;
}
.account a {
  font-size: 14px;
}

/*
Profile Picture

We'll round the profile picture and size it down.

Create a class called .profile-pic in main.css.

Make the size of the profile picture container 60x60.

Then create a rule that selects the all descendant img elements of .profile-pic.

To round the image set the border-radius to 100px. Make sure the image fits in the container set max-width to 100%.
*/
.profile-pic {
  width: 60px;
  height: 60px;
}
.profile-pic img {
  border-radius: 100px;
  max-width: 100%;
}

/*
Profile Class Attribute

We have three classes to apply in index.html - .profile, .account, and .profile-pic.

In the <!-- PROFILE --> block assign the first <div> the class profile. Add the account class to the nested <div>. Finally, give the <div> that surrounds the image with an src of img/profile-pic.jpg the profile-pic class.
*/

/*
To verify your work locally for just this module, run the following command in a terminal: npm run test:module3. The output will let you know which tasks are passing and failing. If you would like to display a visual reference use the command npm run visual:module3.

To verify your work on Pluralsight, commit and push your changes to GitHub and click the Check My Work button.

Hero Section

Moving further down the page, let's focus on styling the hero image and text.

For the image, construct a class called .hero that adjusts several background properties.

Set background-image to the hero.jpg image (find it in the img folder in the project), height to 400px, and background-size to cover.

Center the image horizontally and vertically using background-position.

Finally, transform the text to uppercase.
*/
.hero {
  background-image: url('../img/hero.jpg');
  height: 400px;
  background-size: cover;
  background-position: center center;
  text-transform: uppercase;
}

/*
Hero Headings

To create a more visually appealing hero section we'll add some styling to the <h1> and <h2> elements.

First, create a rule that selects the <h1> in the .hero <div>. Have that rule adjust the position of that <div> by making it relative and then move it to the left by -30px.

Select all <h2> elements in the .hero <div> and change the text color to #faa541.

Next, select both the <h1> and <h2> elements in the .hero <div> and set a few properties to make them consistent.

Adjust the font size to 63px, bump up the font weight to 700, and set the line-height to 0.9.
*/
.hero h1 {
  position: relative;
  left: -30px;
}
.hero h2 {
  color: #faa541;
}
.hero h1,
.hero h2 {
  font-size: 63px;
  font-weight: 700;
  line-height: 0.9;
}
/*
Hero Paragraph

Now, let's change the paragraph element to match the <h1> and <h2> elements.

Select all <p> elements in the .hero <div> and change these font properties: letter spacing to 2px, font weight to 700, font size to 21px.

For this element's margin, zero out the top, left and right. Add 10px to the bottom. Hint: Using the 3 value shorthand for margin.
*/
.hero p {
  letter-spacing: 2px;
  font-weight: 700;
  font-size: 21px;
  /* margin-top: 0;
  margin-bottom: 10px;
  margin-left: 0;
  margin-right: 0; */
  margin: 0 0 10px;
}

/*
Hero Class Attribute

Open the index.html file and locate the first <section> after the <nav> and apply a class attribute of hero.
*/

/*
Banner Container and Image

The sales banner is the first thing in the main content area of the page. Let's draw attention to it.

First, create a class called .banner and adjust the margin of the container set it to 55px 15px.

The banner is the full width of its parent so set width to 100%.

To set the banner apart from the rest of the content set the top border to 1px solid #a0a0a0 and the bottom border to 1px solid #a0a0a0.

Give each element some spacing by setting padding to 25px 0.

Fix the width of the images to 250px by selecting all <img> elements that are descendants of the element with a class of .banner.
*/
.banner {
  margin: 55px 15px;
  width: 100%;
  border-top: 1px solid #a0a0a0;
  border-bottom: 1px solid #a0a0a0;
  padding: 25px 0;
}
.banner img {
  width: 250px;
}

/*
Banner Text

Transform the text in the sales banner by constructing a rule that has a selector of .banner-text. Change these text properties:

font-size - 30px
font-weight - 700
text-transform - uppercase
line-height - 1
text-align - center
*/
.banner-text {
  font-size: 30px;
  font-weight: 700;
  text-transform: uppercase;
  line-height: 1;
  text-align: center;
}

/*
Banner Text Last Child

The text of the last div in the sales banner is a bit smaller than the other lines.

Create a rule that selects the <div> using the > selector and the :last-child pseudo selector, and make sure it is a descendant of the .banner-text element.

The rule should set the font size to 16px, font weight to 400 and add a top margin of 5px.
*/
.banner-text > div:last-child {
  font-size: 16px;
  font-weight: 400;
  margin-top: 5px;
}

/*
Banner and Banner Text Class Attributes

Add the class banner to the first <div> in the <!-- SALES BANNER --> <section>. In this <div>, find the first <div> after the image and give it a class of banner-text
*/

/*
Category

After the sales banner we'll create a four column grid using the flex property.

Create a rule with a selector of .category, set flex to 0 0 25%. This will divide the space evenly in four columns.

We need to add a gap between the columns so set padding to 0 15px.

The images in these columns should be full width. Create a rule that selects the <img> elements that are descendants of any .category element and set width to 100%.
*/
.category {
  flex: 0 0 25%;
  padding: 0 15px;
}
.category img {
  width: 100%;
}

/*
Category Text

The text of each category should have the following properties declared in a rule with the selector .category-text:

color - #364147
padding - 30px 0
text-transform - uppercase
text-align - center
*/
.category-text {
  color: #364147;
  padding: 30px 0;
  text-transform: uppercase;
  text-align: center;
}

/*
Category Text Divs

All <div>'s that are children(>) of a .category-text element should have the font properties:

font-size - 16px
font-weight - 200
color - #faa541
*/
.category-text > div {
  font-size: 16px;
  font-weight: 200;
  color: #faa541;
}

/*

Category Headings

All <h3> headings that are descendants of a .category-text element should have the font properties:

font-size - 30px
font-weight - 700
line-height - 1
*/
.category-text h3 {
  font-size: 30px;
  font-weight: 700;
  line-height: 1;
}

/*
Category Class Attributes

Open index.html and locate the <!-- CATEGORIES --> block.

There are four top-level <div> elements in a <section>. Give each of these a category class.

Next, find the <div>'s after each image in the category <div>'s and apply a class of category-text.
*/

/*
To verify your work locally for just this module, run the following command in a terminal: npm run test:module4. The output will let you know which tasks are passing and failing. If you would like to display a visual reference use the command npm run visual:module4.

To verify your work on Pluralsight, commit and push your changes to GitHub and click the Check My Work button.

Full Banner Container

After the categories, we'll create a Full Banner for Trail Reviews. It will have a picture covering 60% of the main container and a sidebar covering the rest.

To start, create a .full-banner class that sets some box model properties. Set padding to 0 15px,and margin to 50px 0. Set the position to relative so that we can create an inset border next.
*/
.full-banner {
  padding: 0 15px;
  margin: 50px 0;
  position: relative;
}

/*
For the border, we'll use the .full-banner class selector and the pseudo-class :before. Because we're using :before, set content to "" so there is something to style.

Because we used relative positioning for the .full-banner, we can use absolute positioning in this rule. Set position to absolute. Next, set the border to 1px solid #ffffff. With this set, we can adjust the top, bottom, left and right. Use, 30px, 30px, 50px, 50px respectively. Bring the border to the front using z-index: 1.
*/
.full-banner:before {
  content: "";
  position: absolute;
  border: 1px solid #ffffff;
  top: 30px;
  bottom: 30px;
  left: 50px;
  right: 50px;
  z-index: 1;
}

/*
Full Banner Image

Next, let's use the flex property to have the image take up 60% of the width of the banner. Set flex to 0 0 58.333333% in a rule with a selector of .full-banner-image.
Set, background image, size, and position to vista.jpg, cover, and top center, respectively. Set the minimum height of the image to 400px.
*/
.full-banner-image {
  flex: 0 0 58.333333%;
  width: 60%;
  background-image: url('../img/vista.jpg');
  background-size: cover;
  background-position: top center;
  min-height: 400px;
}
